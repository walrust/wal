error: unexpected end of input, expected curly braces
 --> tests/html_macro_tests/for/for_loop_fail.rs:6:5
  |
6 |     html! { for };
  |     ^^^^^^^^^^^^^
  |
  = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected curly braces
  --> tests/html_macro_tests/for/for_loop_fail.rs:14:17
   |
14 |             for vec![1, 2, 3]
   |                 ^^^

warning: unnecessary braces around function argument
 --> tests/html_macro_tests/for/for_loop_fail.rs:9:17
  |
9 |     html! { for { () } };
  |                 ^^  ^^
  |
  = note: `#[warn(unused_braces)]` on by default
help: remove these braces
  |
9 -     html! { for { () } };
9 +     html! { for () };
  |

warning: unnecessary braces around function argument
  --> tests/html_macro_tests/for/for_loop_fail.rs:11:17
   |
11 |     html! { for { Vec::<NonDisplayStruct>::new() } };
   |                 ^^                              ^^
   |
help: remove these braces
   |
11 -     html! { for { Vec::<NonDisplayStruct>::new() } };
11 +     html! { for Vec::<NonDisplayStruct>::new() };
   |

error[E0277]: `()` is not an iterator
 --> tests/html_macro_tests/for/for_loop_fail.rs:7:17
  |
7 |     html! { for () };
  |                 ^^ `()` is not an iterator
  |
  = help: the trait `Iterator` is not implemented for `()`
  = note: required for `()` to implement `IntoIterator`
note: required by a bound in `std::iter::FromIterator::from_iter`
 --> $RUST/core/src/iter/traits/collect.rs
  |
  |     fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> Self;
  |                     ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `FromIterator::from_iter`

error[E0277]: `()` is not an iterator
 --> tests/html_macro_tests/for/for_loop_fail.rs:8:17
  |
8 |     html! { for {} };
  |                 ^^ `()` is not an iterator
  |
  = help: the trait `Iterator` is not implemented for `()`
  = note: required for `()` to implement `IntoIterator`
note: required by a bound in `std::iter::FromIterator::from_iter`
 --> $RUST/core/src/iter/traits/collect.rs
  |
  |     fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> Self;
  |                     ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `FromIterator::from_iter`

error[E0277]: `()` is not an iterator
 --> tests/html_macro_tests/for/for_loop_fail.rs:9:17
  |
9 |     html! { for { () } };
  |                 ^^--^^
  |                 | |
  |                 | this tail expression is of type `()`
  |                 `()` is not an iterator
  |
  = help: the trait `Iterator` is not implemented for `()`
  = note: required for `()` to implement `IntoIterator`
note: required by a bound in `std::iter::FromIterator::from_iter`
 --> $RUST/core/src/iter/traits/collect.rs
  |
  |     fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> Self;
  |                     ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `FromIterator::from_iter`

error[E0277]: `()` doesn't implement `std::fmt::Display`
  --> tests/html_macro_tests/for/for_loop_fail.rs:10:17
   |
10 |     html! { for Vec::<()>::new() };
   |                 ^^^ `()` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `()`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = help: the trait `FromIterator<T>` is implemented for `VNode`
   = note: required for `()` to implement `ToString`
   = note: required for `VNode` to implement `From<()>`
   = note: required for `()` to implement `Into<VNode>`
   = note: required for `VNode` to implement `FromIterator<()>`

error[E0277]: `NonDisplayStruct` doesn't implement `std::fmt::Display`
  --> tests/html_macro_tests/for/for_loop_fail.rs:11:17
   |
11 |     html! { for { Vec::<NonDisplayStruct>::new() } };
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NonDisplayStruct` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `NonDisplayStruct`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = help: the trait `FromIterator<T>` is implemented for `VNode`
   = note: required for `NonDisplayStruct` to implement `ToString`
   = note: required for `VNode` to implement `From<NonDisplayStruct>`
   = note: required for `NonDisplayStruct` to implement `Into<VNode>`
   = note: required for `VNode` to implement `FromIterator<NonDisplayStruct>`
