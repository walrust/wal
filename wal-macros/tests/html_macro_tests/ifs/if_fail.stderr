error: unexpected end of input, expected an expression
 --> tests/html_macro_tests/ifs/if_fail.rs:4:5
  |
4 |     html! { if };
  |     ^^^^^^^^^^^^
  |
  = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error: unexpected end of input, expected curly braces
 --> tests/html_macro_tests/ifs/if_fail.rs:5:5
  |
5 |     html! { if true };
  |     ^^^^^^^^^^^^^^^^^
  |
  = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error: Expected condition for `if` expression, found an empty block
 --> tests/html_macro_tests/ifs/if_fail.rs:6:16
  |
6 |     html! { if {} };
  |                ^^

error: unexpected end of input, expected curly braces
  --> tests/html_macro_tests/ifs/if_fail.rs:10:5
   |
10 |     html! { if true {} else };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error: unexpected end of input, expected an expression
  --> tests/html_macro_tests/ifs/if_fail.rs:11:5
   |
11 |     html! { if true {} else if };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error: unexpected end of input, expected curly braces
  --> tests/html_macro_tests/ifs/if_fail.rs:12:5
   |
12 |     html! { if true {} else if true };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error: Expected condition for `if` expression, found an empty block
  --> tests/html_macro_tests/ifs/if_fail.rs:13:32
   |
13 |     html! { if true {} else if {} };
   |                                ^^

error: unexpected end of input, expected curly braces
  --> tests/html_macro_tests/ifs/if_fail.rs:14:5
   |
14 |     html! { if true {} else if true {} else };
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0425]: cannot find value `invalid_reference` in this scope
  --> tests/html_macro_tests/ifs/if_fail.rs:17:23
   |
17 |     html! { if true { invalid_reference } };
   |                       ^^^^^^^^^^^^^^^^^ not found in this scope

error[E0308]: mismatched types
 --> tests/html_macro_tests/ifs/if_fail.rs:7:16
  |
7 |     html! { if 1 {} };
  |                ^ expected `bool`, found integer

error[E0308]: mismatched types
 --> tests/html_macro_tests/ifs/if_fail.rs:9:16
  |
9 |     html! { if x {} };
  |                ^ expected `bool`, found integer

error[E0277]: `()` doesn't implement `std::fmt::Display`
  --> tests/html_macro_tests/ifs/if_fail.rs:15:23
   |
15 |     html! { if true { {} } };
   |                       ^^ `()` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `()`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = help: the following other types implement trait `From<T>`:
             <VNode as From<T>>
             <VNode as From<VComponent>>
             <VNode as From<VElement>>
             <VNode as From<VList>>
             <VNode as From<VText>>
   = note: required for `()` to implement `ToString`
   = note: required for `VNode` to implement `From<()>`

error[E0277]: `()` doesn't implement `std::fmt::Display`
  --> tests/html_macro_tests/ifs/if_fail.rs:16:23
   |
16 |     html! { if true { () } };
   |                       ^^ `()` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `()`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = help: the following other types implement trait `From<T>`:
             <VNode as From<T>>
             <VNode as From<VComponent>>
             <VNode as From<VElement>>
             <VNode as From<VList>>
             <VNode as From<VText>>
   = note: required for `()` to implement `ToString`
   = note: required for `VNode` to implement `From<()>`
